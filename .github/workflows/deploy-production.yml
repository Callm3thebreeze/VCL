name: Vocali Production Deployment

env:
  NODE_OPTIONS: --max-old-space-size=6144

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy_frontend_production:
    name: Deploy frontend production
    runs-on: ubuntu-24.04
    environment: production
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend application
        working-directory: ./frontend
        run: npm run generate
        env:
          NUXT_PUBLIC_API_BASE: ${{ vars.BACKEND_URL_PROD }}
          NUXT_PUBLIC_APP_NAME: 'iVocal'
          NUXT_PUBLIC_ENVIRONMENT: 'production'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy to S3
        working-directory: ./frontend
        run: aws s3 sync .output/public/ s3://${{ vars.S3_FRONTEND_BUCKET_PROD }} --delete --cache-control max-age=31536000,public

      - name: Invalidate CloudFront (if configured)
        run: |
          if [ -n "${{ vars.CLOUDFRONT_DISTRIBUTION_ID_PROD }}" ]; then
            aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID_PROD }} --paths "/*"
            echo "‚úÖ CloudFront invalidation created"
          else
            echo "‚ö†Ô∏è CloudFront distribution ID not configured, skipping invalidation"
          fi

  deploy_backend_production:
    name: Deploy backend production
    runs-on: ubuntu-24.04
    environment: production
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install backend dependencies (including dev for tests)
        working-directory: ./backend
        run: npm ci

      - name: Run backend tests
        working-directory: ./backend
        run: npm test
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ vars.SUPABASE_URL_PROD }}
          SUPABASE_SERVICE_KEY: ${{ vars.SUPABASE_SERVICE_KEY_PROD }}
          JWT_SECRET: ${{ vars.JWT_SECRET_PROD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install production dependencies for package
        working-directory: ./backend
        run: |
          # Limpiar node_modules y reinstalar solo producci√≥n para el package
          rm -rf node_modules
          npm ci --only=production
          JWT_SECRET: ${{ vars.JWT_SECRET_PROD }}

      - name: Set AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ vars.AWS_ACCESS_KEY_ID }} &&
          aws configure set aws_secret_access_key ${{ vars.AWS_SECRET_ACCESS_KEY }} &&
          aws configure set region ${{ vars.AWS_DEFAULT_REGION }}

      - name: Create deployment package
        run: |
          cd backend
          zip -r ../vocali-backend-prod-$(date +%Y%m%d-%H%M%S).zip . \
            -x "node_modules/*" ".git/*" "uploads/*" "temp/*" "*.log" "coverage/*"
          cd ..

      - name: Upload to S3 for deployment
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          aws s3 cp vocali-backend-prod-$TIMESTAMP.zip s3://${{ vars.S3_DEPLOYMENT_BUCKET_PROD }}/vocali-backend-prod-$TIMESTAMP.zip

      - name: Trigger CodeDeploy for production
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          aws deploy create-deployment \
            --application-name ${{ vars.CODEDEPLOY_APPLICATION_PROD }} \
            --deployment-group-name ${{ vars.CODEDEPLOY_GROUP_PROD }} \
            --s3-location bucket=${{ vars.S3_DEPLOYMENT_BUCKET_PROD }},key=vocali-backend-prod-$TIMESTAMP.zip,bundleType=zip \
            --description "Production deployment from GitHub Actions - main branch"

      - name: Deployment complete
        run: |
          echo "üöÄ Production deployment completed successfully!"
          echo "üåê Frontend: https://${{ vars.FRONTEND_DOMAIN_PROD }}"
          echo "üì° Backend: https://${{ vars.BACKEND_DOMAIN_PROD }}"
