name: Vocali Backend Develop Deployment

env:
  NODE_OPTIONS: --max-old-space-size=6144

on:
  push:
    branches: [develop]
    paths: ['backend/**']
  workflow_dispatch:

jobs:
  deploy_backend_develop:
    name: Deploy backend develop branch
    runs-on: ubuntu-24.04
    environment: develop
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install backend dependencies (including dev)
        working-directory: ./backend
        run: npm ci

      - name: Run backend tests
        working-directory: ./backend
        run: npm test
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ vars.SUPABASE_SERVICE_KEY }}
          JWT_SECRET: ${{ vars.JWT_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key-for-ci' }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_S3_BUCKET: 'test-bucket'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install production dependencies for package
        working-directory: ./backend
        run: |
          # Limpiar node_modules y reinstalar solo producci√≥n para el package
          rm -rf node_modules
          npm ci --only=production

      - name: Create deployment package
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "üîß WORKFLOW VERSION: ZIP v3.0 - Updated $(date)"
          echo "Creating package with timestamp: $TIMESTAMP"
          echo "Current directory: $(pwd)"
          echo "Available commands:"
          which tar
          which zip
          echo "Files in current directory:"
          ls -la

          # Crear el package con zip (ignorando .gitignore temporalmente)
          echo "Creating deployment package with zip..."
          cd backend
          echo "Files in backend directory:"
          ls -la | head -10

          # Crear zip con exclusiones expl√≠citas
          zip -r ../vocali-backend-$TIMESTAMP.zip . \
            -x ".git/*" "uploads/*" "temp/*" "*.log" "coverage/*" "tests/*" "*.test.js" \
            -x "node_modules/.cache/*" || {
            echo "‚ùå ZIP creation failed with exit code $?"
            exit 1
          }
          cd ..

          # Verificar si el archivo se cre√≥ (independientemente del .gitignore)
          echo "Checking for created package..."
          if [ -f "vocali-backend-$TIMESTAMP.zip" ]; then
            echo "‚úÖ Package created successfully: vocali-backend-$TIMESTAMP.zip"
            ls -la vocali-backend-*.zip
          else
            echo "‚ùå Package file not found after creation"
            echo "All files in current directory:"
            ls -la
            echo "Checking if file exists with different name:"
            ls -la *.zip 2>/dev/null || echo "No zip files found"
            exit 1
          fi

          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

      - name: Upload to S3 for deployment
        run: |
          echo "Uploading package: vocali-backend-$TIMESTAMP.zip"
          aws s3 cp vocali-backend-$TIMESTAMP.zip s3://${{ vars.S3_DEPLOYMENT_BUCKET }}/vocali-backend-$TIMESTAMP.zip
          echo "‚úÖ Package uploaded: vocali-backend-$TIMESTAMP.zip"

      # Opci√≥n adicional: Deploy directo a EC2 usando CodeDeploy
      - name: Trigger CodeDeploy (if configured)
        run: |
          if [ -n "${{ vars.CODEDEPLOY_APPLICATION }}" ]; then
            echo "Triggering CodeDeploy with package: vocali-backend-$TIMESTAMP.zip"
            aws deploy create-deployment \
              --application-name ${{ vars.CODEDEPLOY_APPLICATION }} \
              --deployment-group-name ${{ vars.CODEDEPLOY_GROUP }} \
              --s3-location bucket=${{ vars.S3_DEPLOYMENT_BUCKET }},key=vocali-backend-$TIMESTAMP.zip,bundleType=zip \
              --description "Auto deployment from GitHub Actions - develop branch"
            echo "‚úÖ CodeDeploy deployment triggered"
          else
            echo "‚ö†Ô∏è CodeDeploy not configured, manual deployment required"
          fi

      - name: Deployment complete
        run: |
          echo "üöÄ Backend deployment package created successfully!"
          echo "üì¶ Package location: s3://${{ vars.S3_DEPLOYMENT_BUCKET }}"
          echo "üì° Monitor deployment in AWS Console or EC2 instance"
          echo "üîç Check logs: ssh to EC2 and run 'pm2 logs vocali-backend'"
